# import Place, PlaceOrderByInput, Review, ReviewOrderByInput, ReviewSubscriptionPayload, Vote, VoteSubscriptionPayload from "./generated/prisma.graphql"

# QUERY: TYPE DEFINITION

type Query {
  info: String!
  feed(
    filter: FeedFilterInput
    skip: Int
    first: Int
    orderBy: ReviewOrderByInput
  ): Feed!
  places(
    filter: PlaceFilterInput
    skip: Int
    first: Int
    orderBy: PlaceOrderByInput
  ): Places!
}

# QUERY: INPUT DEFINITIONS

input FeedFilterInput {
  accessibility: String
  cleanliness: Int
  numStalls: Int
  place: FeedPlaceInput
  privacy: Int
  rating: Int
  tpQuality: Int
  user: UserInput
}

input FeedPlaceInput {
  placeId: ID
}

input PlaceFilterInput {
  placeId: ID
  bounds: BoundsInput
}

input UserInput {
  id: String
}

# MUTATION: TYPE DEFINITION

type Mutation {
  post(
    accessibility: String!
    cleanliness: Int!
    numStalls: Int!
    place: PostPlaceInput!
    privacy: Int!
    rating: Int!
    reviewText: String!
    tpQuality: Int!
  ): Review!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(reviewId: ID!): Vote
}

input NorthEastInput {
  lat: String!
  lng: String!
}

input SouthWestInput {
  lat: String!
  lng: String!
}

input BoundsInput {
  ne: NorthEastInput!
  sw: SouthWestInput!
}

input PostPlaceInput {
  name: String!
  lat: Float!
  lng: Float!
  placeId: ID!
}

type Subscription {
  newReview: ReviewSubscriptionPayload
  newVote: VoteSubscriptionPayload
}

type AuthPayload {
  token: String
  user: User
}

type Feed {
  reviews: [Review!]!
  count: Int!
}

type Places {
  places: [Place!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  reviews: [Review!]!
}
