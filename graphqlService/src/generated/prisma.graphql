# source: https://us1.prisma.sh/michael-stromberg-2f6e83/database/dev
# timestamp: Sat Nov 24 2018 19:58:37 GMT-0800 (Pacific Standard Time)

type AggregateReview {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createReview(data: ReviewCreateInput!): Review!
  createUser(data: UserCreateInput!): User!
  createVote(data: VoteCreateInput!): Vote!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteUser(where: UserWhereUniqueInput!): User
  deleteVote(where: VoteWhereUniqueInput!): Vote
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  review(where: ReviewWhereUniqueInput!): Review
  user(where: UserWhereUniqueInput!): User
  vote(where: VoteWhereUniqueInput!): Vote
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Review implements Node {
  id: ID!
  createdAt: DateTime!
  accessibility: String!
  cleanliness: Int!
  locationLat: Float!
  locationLng: Float!
  locationPlaceId: String!
  numStalls: Int!
  privacy: Int!
  rating: Int!
  reviewText: String!
  tpQuality: Int!
  postedBy: User!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  accessibility: String!
  cleanliness: Int!
  locationLat: Float!
  locationLng: Float!
  locationPlaceId: String!
  numStalls: Int!
  privacy: Int!
  rating: Int!
  reviewText: String!
  tpQuality: Int!
  postedBy: UserCreateOneWithoutReviewsInput!
  votes: VoteCreateManyWithoutReviewInput
}

input ReviewCreateManyWithoutPostedByInput {
  create: [ReviewCreateWithoutPostedByInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateOneWithoutVotesInput {
  create: ReviewCreateWithoutVotesInput
  connect: ReviewWhereUniqueInput
}

input ReviewCreateWithoutPostedByInput {
  accessibility: String!
  cleanliness: Int!
  locationLat: Float!
  locationLng: Float!
  locationPlaceId: String!
  numStalls: Int!
  privacy: Int!
  rating: Int!
  reviewText: String!
  tpQuality: Int!
  votes: VoteCreateManyWithoutReviewInput
}

input ReviewCreateWithoutVotesInput {
  accessibility: String!
  cleanliness: Int!
  locationLat: Float!
  locationLng: Float!
  locationPlaceId: String!
  numStalls: Int!
  privacy: Int!
  rating: Int!
  reviewText: String!
  tpQuality: Int!
  postedBy: UserCreateOneWithoutReviewsInput!
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  accessibility_ASC
  accessibility_DESC
  cleanliness_ASC
  cleanliness_DESC
  locationLat_ASC
  locationLat_DESC
  locationLng_ASC
  locationLng_DESC
  locationPlaceId_ASC
  locationPlaceId_DESC
  numStalls_ASC
  numStalls_DESC
  privacy_ASC
  privacy_DESC
  rating_ASC
  rating_DESC
  reviewText_ASC
  reviewText_DESC
  tpQuality_ASC
  tpQuality_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  accessibility: String!
  cleanliness: Int!
  locationLat: Float!
  locationLng: Float!
  locationPlaceId: String!
  numStalls: Int!
  privacy: Int!
  rating: Int!
  reviewText: String!
  tpQuality: Int!
}

input ReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  accessibility: String

  """All values that are not equal to given value."""
  accessibility_not: String

  """All values that are contained in given list."""
  accessibility_in: [String!]

  """All values that are not contained in given list."""
  accessibility_not_in: [String!]

  """All values less than the given value."""
  accessibility_lt: String

  """All values less than or equal the given value."""
  accessibility_lte: String

  """All values greater than the given value."""
  accessibility_gt: String

  """All values greater than or equal the given value."""
  accessibility_gte: String

  """All values containing the given string."""
  accessibility_contains: String

  """All values not containing the given string."""
  accessibility_not_contains: String

  """All values starting with the given string."""
  accessibility_starts_with: String

  """All values not starting with the given string."""
  accessibility_not_starts_with: String

  """All values ending with the given string."""
  accessibility_ends_with: String

  """All values not ending with the given string."""
  accessibility_not_ends_with: String
  cleanliness: Int

  """All values that are not equal to given value."""
  cleanliness_not: Int

  """All values that are contained in given list."""
  cleanliness_in: [Int!]

  """All values that are not contained in given list."""
  cleanliness_not_in: [Int!]

  """All values less than the given value."""
  cleanliness_lt: Int

  """All values less than or equal the given value."""
  cleanliness_lte: Int

  """All values greater than the given value."""
  cleanliness_gt: Int

  """All values greater than or equal the given value."""
  cleanliness_gte: Int
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  locationPlaceId: String

  """All values that are not equal to given value."""
  locationPlaceId_not: String

  """All values that are contained in given list."""
  locationPlaceId_in: [String!]

  """All values that are not contained in given list."""
  locationPlaceId_not_in: [String!]

  """All values less than the given value."""
  locationPlaceId_lt: String

  """All values less than or equal the given value."""
  locationPlaceId_lte: String

  """All values greater than the given value."""
  locationPlaceId_gt: String

  """All values greater than or equal the given value."""
  locationPlaceId_gte: String

  """All values containing the given string."""
  locationPlaceId_contains: String

  """All values not containing the given string."""
  locationPlaceId_not_contains: String

  """All values starting with the given string."""
  locationPlaceId_starts_with: String

  """All values not starting with the given string."""
  locationPlaceId_not_starts_with: String

  """All values ending with the given string."""
  locationPlaceId_ends_with: String

  """All values not ending with the given string."""
  locationPlaceId_not_ends_with: String
  numStalls: Int

  """All values that are not equal to given value."""
  numStalls_not: Int

  """All values that are contained in given list."""
  numStalls_in: [Int!]

  """All values that are not contained in given list."""
  numStalls_not_in: [Int!]

  """All values less than the given value."""
  numStalls_lt: Int

  """All values less than or equal the given value."""
  numStalls_lte: Int

  """All values greater than the given value."""
  numStalls_gt: Int

  """All values greater than or equal the given value."""
  numStalls_gte: Int
  privacy: Int

  """All values that are not equal to given value."""
  privacy_not: Int

  """All values that are contained in given list."""
  privacy_in: [Int!]

  """All values that are not contained in given list."""
  privacy_not_in: [Int!]

  """All values less than the given value."""
  privacy_lt: Int

  """All values less than or equal the given value."""
  privacy_lte: Int

  """All values greater than the given value."""
  privacy_gt: Int

  """All values greater than or equal the given value."""
  privacy_gte: Int
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  reviewText: String

  """All values that are not equal to given value."""
  reviewText_not: String

  """All values that are contained in given list."""
  reviewText_in: [String!]

  """All values that are not contained in given list."""
  reviewText_not_in: [String!]

  """All values less than the given value."""
  reviewText_lt: String

  """All values less than or equal the given value."""
  reviewText_lte: String

  """All values greater than the given value."""
  reviewText_gt: String

  """All values greater than or equal the given value."""
  reviewText_gte: String

  """All values containing the given string."""
  reviewText_contains: String

  """All values not containing the given string."""
  reviewText_not_contains: String

  """All values starting with the given string."""
  reviewText_starts_with: String

  """All values not starting with the given string."""
  reviewText_not_starts_with: String

  """All values ending with the given string."""
  reviewText_ends_with: String

  """All values not ending with the given string."""
  reviewText_not_ends_with: String
  tpQuality: Int

  """All values that are not equal to given value."""
  tpQuality_not: Int

  """All values that are contained in given list."""
  tpQuality_in: [Int!]

  """All values that are not contained in given list."""
  tpQuality_not_in: [Int!]

  """All values less than the given value."""
  tpQuality_lt: Int

  """All values less than or equal the given value."""
  tpQuality_lte: Int

  """All values greater than the given value."""
  tpQuality_gt: Int

  """All values greater than or equal the given value."""
  tpQuality_gte: Int
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  accessibility: String
  cleanliness: Int
  locationLat: Float
  locationLng: Float
  locationPlaceId: String
  numStalls: Int
  privacy: Int
  rating: Int
  reviewText: String
  tpQuality: Int
  postedBy: UserUpdateOneRequiredWithoutReviewsInput
  votes: VoteUpdateManyWithoutReviewInput
}

input ReviewUpdateManyDataInput {
  accessibility: String
  cleanliness: Int
  locationLat: Float
  locationLng: Float
  locationPlaceId: String
  numStalls: Int
  privacy: Int
  rating: Int
  reviewText: String
  tpQuality: Int
}

input ReviewUpdateManyMutationInput {
  accessibility: String
  cleanliness: Int
  locationLat: Float
  locationLng: Float
  locationPlaceId: String
  numStalls: Int
  privacy: Int
  rating: Int
  reviewText: String
  tpQuality: Int
}

input ReviewUpdateManyWithoutPostedByInput {
  create: [ReviewCreateWithoutPostedByInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutPostedByInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutPostedByInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateOneRequiredWithoutVotesInput {
  create: ReviewCreateWithoutVotesInput
  connect: ReviewWhereUniqueInput
  update: ReviewUpdateWithoutVotesDataInput
  upsert: ReviewUpsertWithoutVotesInput
}

input ReviewUpdateWithoutPostedByDataInput {
  accessibility: String
  cleanliness: Int
  locationLat: Float
  locationLng: Float
  locationPlaceId: String
  numStalls: Int
  privacy: Int
  rating: Int
  reviewText: String
  tpQuality: Int
  votes: VoteUpdateManyWithoutReviewInput
}

input ReviewUpdateWithoutVotesDataInput {
  accessibility: String
  cleanliness: Int
  locationLat: Float
  locationLng: Float
  locationPlaceId: String
  numStalls: Int
  privacy: Int
  rating: Int
  reviewText: String
  tpQuality: Int
  postedBy: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithWhereUniqueWithoutPostedByInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutPostedByDataInput!
}

input ReviewUpsertWithoutVotesInput {
  update: ReviewUpdateWithoutVotesDataInput!
  create: ReviewCreateWithoutVotesInput!
}

input ReviewUpsertWithWhereUniqueWithoutPostedByInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutPostedByDataInput!
  create: ReviewCreateWithoutPostedByInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  accessibility: String

  """All values that are not equal to given value."""
  accessibility_not: String

  """All values that are contained in given list."""
  accessibility_in: [String!]

  """All values that are not contained in given list."""
  accessibility_not_in: [String!]

  """All values less than the given value."""
  accessibility_lt: String

  """All values less than or equal the given value."""
  accessibility_lte: String

  """All values greater than the given value."""
  accessibility_gt: String

  """All values greater than or equal the given value."""
  accessibility_gte: String

  """All values containing the given string."""
  accessibility_contains: String

  """All values not containing the given string."""
  accessibility_not_contains: String

  """All values starting with the given string."""
  accessibility_starts_with: String

  """All values not starting with the given string."""
  accessibility_not_starts_with: String

  """All values ending with the given string."""
  accessibility_ends_with: String

  """All values not ending with the given string."""
  accessibility_not_ends_with: String
  cleanliness: Int

  """All values that are not equal to given value."""
  cleanliness_not: Int

  """All values that are contained in given list."""
  cleanliness_in: [Int!]

  """All values that are not contained in given list."""
  cleanliness_not_in: [Int!]

  """All values less than the given value."""
  cleanliness_lt: Int

  """All values less than or equal the given value."""
  cleanliness_lte: Int

  """All values greater than the given value."""
  cleanliness_gt: Int

  """All values greater than or equal the given value."""
  cleanliness_gte: Int
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  locationPlaceId: String

  """All values that are not equal to given value."""
  locationPlaceId_not: String

  """All values that are contained in given list."""
  locationPlaceId_in: [String!]

  """All values that are not contained in given list."""
  locationPlaceId_not_in: [String!]

  """All values less than the given value."""
  locationPlaceId_lt: String

  """All values less than or equal the given value."""
  locationPlaceId_lte: String

  """All values greater than the given value."""
  locationPlaceId_gt: String

  """All values greater than or equal the given value."""
  locationPlaceId_gte: String

  """All values containing the given string."""
  locationPlaceId_contains: String

  """All values not containing the given string."""
  locationPlaceId_not_contains: String

  """All values starting with the given string."""
  locationPlaceId_starts_with: String

  """All values not starting with the given string."""
  locationPlaceId_not_starts_with: String

  """All values ending with the given string."""
  locationPlaceId_ends_with: String

  """All values not ending with the given string."""
  locationPlaceId_not_ends_with: String
  numStalls: Int

  """All values that are not equal to given value."""
  numStalls_not: Int

  """All values that are contained in given list."""
  numStalls_in: [Int!]

  """All values that are not contained in given list."""
  numStalls_not_in: [Int!]

  """All values less than the given value."""
  numStalls_lt: Int

  """All values less than or equal the given value."""
  numStalls_lte: Int

  """All values greater than the given value."""
  numStalls_gt: Int

  """All values greater than or equal the given value."""
  numStalls_gte: Int
  privacy: Int

  """All values that are not equal to given value."""
  privacy_not: Int

  """All values that are contained in given list."""
  privacy_in: [Int!]

  """All values that are not contained in given list."""
  privacy_not_in: [Int!]

  """All values less than the given value."""
  privacy_lt: Int

  """All values less than or equal the given value."""
  privacy_lte: Int

  """All values greater than the given value."""
  privacy_gt: Int

  """All values greater than or equal the given value."""
  privacy_gte: Int
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  reviewText: String

  """All values that are not equal to given value."""
  reviewText_not: String

  """All values that are contained in given list."""
  reviewText_in: [String!]

  """All values that are not contained in given list."""
  reviewText_not_in: [String!]

  """All values less than the given value."""
  reviewText_lt: String

  """All values less than or equal the given value."""
  reviewText_lte: String

  """All values greater than the given value."""
  reviewText_gt: String

  """All values greater than or equal the given value."""
  reviewText_gte: String

  """All values containing the given string."""
  reviewText_contains: String

  """All values not containing the given string."""
  reviewText_not_contains: String

  """All values starting with the given string."""
  reviewText_starts_with: String

  """All values not starting with the given string."""
  reviewText_not_starts_with: String

  """All values ending with the given string."""
  reviewText_ends_with: String

  """All values not ending with the given string."""
  reviewText_not_ends_with: String
  tpQuality: Int

  """All values that are not equal to given value."""
  tpQuality_not: Int

  """All values that are contained in given list."""
  tpQuality_in: [Int!]

  """All values that are not contained in given list."""
  tpQuality_not_in: [Int!]

  """All values less than the given value."""
  tpQuality_lt: Int

  """All values less than or equal the given value."""
  tpQuality_lte: Int

  """All values greater than the given value."""
  tpQuality_gt: Int

  """All values greater than or equal the given value."""
  tpQuality_gte: Int
  postedBy: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Subscription {
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  reviews: ReviewCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutReviewsInput {
  name: String!
  email: String!
  password: String!
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  name: String!
  email: String!
  password: String!
  reviews: ReviewCreateManyWithoutPostedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  reviews: ReviewUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneRequiredWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateWithoutReviewsDataInput {
  name: String
  email: String
  password: String
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesDataInput {
  name: String
  email: String
  password: String
  reviews: ReviewUpdateManyWithoutPostedByInput
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vote implements Node {
  id: ID!
  review: Review!
  user: User!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  review: ReviewCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutReviewInput {
  create: [VoteCreateWithoutReviewInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutReviewInput {
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  review: ReviewCreateOneWithoutVotesInput!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
}

input VoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  review: ReviewUpdateOneRequiredWithoutVotesInput
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyWithoutReviewInput {
  create: [VoteCreateWithoutReviewInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutReviewInput!]
  deleteMany: [VoteScalarWhereInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutReviewInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [VoteScalarWhereInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithoutReviewDataInput {
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  review: ReviewUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutReviewInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutReviewDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutReviewInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutReviewDataInput!
  create: VoteCreateWithoutReviewInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  review: ReviewWhereInput
  user: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
