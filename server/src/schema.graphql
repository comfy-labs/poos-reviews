scalar DateTime

type Query {
  shitholes: [Shithole]!
  poosers: [Pooser]!
  turdbits: [Turdbit]!
  shitholeWithName(name: String!): [Shithole]
  pooserTurdbits(email: String): [Turdbit]!
  poosersWithTurdbitsAndShitholes: [Pooser]!
  shitholesWithinBoundingBox(northWestLat: Float!, northWestLng: Float!, southEastLat: Float!, southEastLng: Float!): [Shithole]!
  shitholeWithId(id: String!): Shithole
  turdbitsForShithole(id: String!): [Turdbit]!
  turdbitWithId(id: String!): Turdbit
}

type Mutation {
  createShithole(name: String!, address: String!, lat: Float!, lng: Float!): Shithole
  createTurdbit(accessibility: Int, cleanliness: Int, stalls: Int, privacy: Int, text: String!, tpQuality: Int, overall: Int!, author: Pooser!, shithole: Shithole!): Turdbit
}

type AuthPayload {
  token: String
  user: Pooser
}

type Pooser {
  id: ID!
  name: String!
  email: String!
  password: String!
  turdbits: [Turdbit!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type Turdbit {
  id: ID!
  accessibility: Int
  cleanliness: Int
  stalls: Int
  privacy: Int
  text: String
  tpQuality: Int
  overall: Int!
  author: Pooser
  shithole: Shithole
  updatedAt: DateTime!
  createdAt: DateTime!
}

type Shithole {
  id: ID!
  lat: Float!
  lng: Float!
  name: String!
  address: String!
  turdbits: [Turdbit]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type Shitpic {
  id: ID!
  url: String!
  caption: String
}

type Link {
  id: ID!
  description: String!
  url: String!
}